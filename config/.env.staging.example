# Azure Function File Upload Service - Development/Staging Configuration Template
# Configuration for development/staging environments that connect to cloud resources

# === AZURE FUNCTIONS CORE SETTINGS ===
AzureWebJobsStorage=DefaultEndpointsProtocol=https;AccountName=DEV_STORAGE_ACCOUNT;AccountKey=DEV_STORAGE_KEY;EndpointSuffix=core.windows.net
FUNCTIONS_WORKER_RUNTIME=python
AzureWebJobsFeatureFlags=EnableWorkerIndexing
PYTHON_ISOLATE_WORKER_DEPENDENCIES=1

# === AZURE STORAGE CONFIGURATION ===
AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=DEV_STORAGE_ACCOUNT;AccountKey=DEV_STORAGE_KEY;EndpointSuffix=core.windows.net
AZURE_STORAGE_CONTAINER_NAME=uploads-dev

# === DATABASE CONFIGURATION ===
DATABASE_TYPE=azuresql

# === AZURE SQL CONFIGURATION ===
# For development/staging, you might use Azure AD password or managed identity
AZURE_SQL_AUTH_METHOD=auto
AZURE_SQL_SERVER=your_dev_server.database.windows.net
AZURE_SQL_DATABASE=your_dev_database

# Option 1: Azure AD Password (for development)
AZURE_SQL_USERNAME=dev_user@domain.com
AZURE_SQL_PASSWORD=dev_password

# Option 2: Managed Identity (if deployed to Azure)
# AZURE_SQL_AUTH_METHOD=managed_identity
# AZURE_SQL_MANAGED_IDENTITY_CLIENT_ID=your_dev_mi_client_id

# === AI SERVICES CONFIGURATION ===
AZURE_OPENAI_ENDPOINT=https://your-dev-openai-resource.openai.azure.com/
AZURE_OPENAI_KEY=your_dev_openai_key
AZURE_OPENAI_API_VERSION=2024-02-01
AZURE_OPENAI_MODEL_DEPLOYMENT=gpt-4o-cms
AZURE_OPENAI_EMBEDDING_DEPLOYMENT=text-embedding-ada-002

AZURE_SEARCH_ENDPOINT=https://your-dev-search-service.search.windows.net
AZURE_SEARCH_KEY=your_dev_search_key
AZURE_SEARCH_INDEX=legal-documents-dev

# === DOCUMENT PROCESSING CONFIGURATION ===
DEFAULT_CHUNKING_METHOD=intelligent

# === DEVELOPMENT/STAGING SETTINGS ===
MAX_FILE_SIZE_MB=200
DEFAULT_SAS_EXPIRY_HOURS=24
LOG_LEVEL=DEBUG

# === DEVELOPMENT/STAGING NOTES ===
# 1. Use separate Azure resources for dev/staging
# 2. Consider using Azure AD authentication for database
# 3. Enable detailed logging for troubleshooting
# 4. Test different chunking methods and configurations
# 5. Validate AI model responses and search indexing
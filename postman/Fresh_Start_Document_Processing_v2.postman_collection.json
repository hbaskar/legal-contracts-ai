{
  "info": {
    "_postman_id": "fresh-start-doc-processing-v2",
    "name": "Fresh Start Document Processing API v2",
    "description": "Complete API collection for the Fresh Start document processing Azure Functions app. Includes endpoints for file upload, document processing, health checks, and Azure Search operations with proper authentication.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test(\"Database and storage checks passed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('checks');",
                  "    pm.expect(jsonData.checks.database.status).to.eql('healthy');",
                  "    pm.expect(jsonData.checks.blob_storage.status).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            }
          },
          "response": []
        },
        {
          "name": "Document Processing Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI services availability check\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ai_services_available');",
                  "});",
                  "",
                  "pm.test(\"Environment info present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('environment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "process_document"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Management",
      "item": [
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"File uploaded successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test(\"File ID returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('file_id');",
                  "    pm.collectionVariables.set('last_file_id', jsonData.file_id);",
                  "});",
                  "",
                  "pm.test(\"File metadata present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData).to.have.property('size');",
                  "    pm.expect(jsonData).to.have.property('checksum');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "Select a file to upload (PDF, DOCX, or TXT)",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "upload"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get File Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"File info retrieved\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('file_id');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/files/{{last_file_id}}?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "files", "{{last_file_id}}"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document Processing",
      "item": [
        {
          "name": "Process with Intelligent Chunking",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Sample document content for testing",
                  "const sampleContent = `EMPLOYEE HANDBOOK",
                  "",
                  "SECTION 1: COMPANY OVERVIEW",
                  "Our company was founded in 1995 with the mission to provide excellent service to our clients. We specialize in innovative solutions and maintain the highest standards of professional excellence.",
                  "",
                  "SECTION 2: EMPLOYEE POLICIES",
                  "All employees are expected to adhere to our core values of integrity, respect, and accountability. Work hours are Monday through Friday, 9 AM to 5 PM.",
                  "",
                  "SECTION 3: BENEFITS",
                  "We offer comprehensive health insurance, dental coverage, and a 401(k) retirement plan. Employees are eligible for benefits after 90 days of employment.`;",
                  "",
                  "// Encode to base64 for API",
                  "const encoded = btoa(sampleContent);",
                  "pm.collectionVariables.set('sample_base64_content', encoded);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Processing completed successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test(\"Chunks created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('chunks_created');",
                  "    pm.expect(jsonData.chunks_created).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Intelligent chunking used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enhancement).to.include('intelligent');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_document_intelligent.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"intelligent\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "process_document"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process with Heading-Based Chunking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Heading-based chunking used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enhancement).to.include('heading');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_document_heading.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"heading\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "process_document"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process with Fixed-Size Chunking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Fixed-size chunking used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enhancement).to.include('fixed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_document_fixed.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"basic\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "process_document"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Azure Search Operations",
      "item": [
        {
          "name": "Get Azure Search Documents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Documents retrieved\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "    pm.expect(jsonData.documents).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Document structure is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        const doc = jsonData.documents[0];",
                  "        pm.expect(doc).to.have.property('id');",
                  "        pm.expect(doc).to.have.property('content');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/documents?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "documents"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Azure Search Documents (Recommended - 15 documents)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: This endpoint has database schema issues",
                  "// The azure_search_chunks table is missing paragraph_content column",
                  "// Use 'Get Azure Search Documents' instead which works properly",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Status code is 200\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    pm.test(\"Chunks retrieved\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('chunks');",
                  "        pm.expect(jsonData.chunks).to.be.an('array');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Known database schema issue\", function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500, 200]);",
                  "        console.log('Database schema needs paragraph_content column. Use Get Azure Search Documents instead.');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/documents?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "documents"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Persisted Chunks from Database",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test('Response contains documents array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "    pm.expect(jsonData.documents).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response shows document count', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    console.log('Total persisted documents in database:', jsonData.total_documents);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/chunks/persisted?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "chunks", "persisted"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}"
                }
              ]
            },
            "description": "Retrieve persisted document chunks stored in the Azure SQL database. This endpoint provides access to documents that have been processed and stored with full paragraph content, titles, summaries, and metadata.\\n\\nReturns documents with:\\n- Full paragraph content\\n- AI-generated titles and summaries\\n- Extracted keyphrases\\n- File metadata and compliance status\\n- Upload tracking information"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Operations",
      "item": [
        {
          "name": "Setup Azure Search Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Index setup completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force_recreate\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/setup?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "setup"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Azure Search Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/reset?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "reset"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Database",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Database reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?code={{function_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "database", "reset"],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to: ' + pm.request.url);",
          "",
          "// Validate required environment variables",
          "if (!pm.environment.get('base_url')) {",
          "    console.warn('base_url environment variable is not set');",
          "}",
          "",
          "// For production environment, validate function key",
          "if (pm.environment.name && pm.environment.name.includes('Production')) {",
          "    if (!pm.environment.get('function_key')) {",
          "        console.warn('function_key is required for production environment');",
          "    }",
          "}"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global post-response script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "// Log response details for debugging",
          "console.log('Response Status: ' + pm.response.status);",
          "console.log('Response Time: ' + pm.response.responseTime + 'ms');",
          "",
          "// Handle authentication errors",
          "if (pm.response.code === 401) {",
          "    console.error('Authentication failed. Check your function_key environment variable.');",
          "}",
          "",
          "if (pm.response.code === 403) {",
          "    console.error('Access forbidden. Verify your permissions and function key.');",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "sample_base64_content",
      "value": "",
      "type": "string",
      "description": "Base64 encoded sample document content for testing"
    },
    {
      "key": "last_file_id",
      "value": "",
      "type": "string",
      "description": "ID of the last uploaded file"
    }
  ]
}
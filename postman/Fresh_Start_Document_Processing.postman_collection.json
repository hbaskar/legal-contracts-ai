{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Fresh Start Document Processing API",
    "description": "Complete API collection for the Fresh Start document processing Azure Functions app. Includes endpoints for file upload, document processing, health checks, chunk comparison analysis, and direct Azure Search index content access. Features admin functions for database and search index management, plus comprehensive content retrieval from Azure Search without database joins. Includes admin functions for database and search index management. All protected endpoints include Azure Function authentication via function keys.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Service is healthy\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "health"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Document Processing Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI services availability check\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ai_services_available');",
                  "});",
                  "",
                  "pm.test(\"Environment info present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('environment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Management",
      "item": [
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Upload successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"File ID returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('file_id');",
                  "    pm.collectionVariables.set('last_file_id', jsonData.file_id);",
                  "});",
                  "",
                  "pm.test(\"File metadata present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData).to.have.property('size');",
                  "    pm.expect(jsonData).to.have.property('checksum');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "Select a file to upload (PDF, DOCX, or TXT)",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "upload"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get File Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"File metadata returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData).to.have.property('content_type');",
                  "    pm.expect(jsonData).to.have.property('size');",
                  "});",
                  "",
                  "pm.test(\"Download URL present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('download_url');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/files/{{last_file_id}}?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "files",
                "{{last_file_id}}"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document Processing",
      "item": [
        {
          "name": "Process Document with Base64",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate sample text content with proper structure for testing",
                  "const sampleText = `EMPLOYEE HANDBOOK",
                  "",
                  "SECTION 1: COMPANY OVERVIEW",
                  "Our company was founded with a mission to provide excellent service to customers while maintaining a positive work environment.",
                  "",
                  "Mission Statement",
                  "To deliver exceptional value through innovative solutions while fostering collaboration.",
                  "",
                  "SECTION 2: EMPLOYMENT POLICIES",
                  "All employees must adhere to professional standards and our code of conduct.",
                  "",
                  "Code of Conduct",
                  "Professional behavior, respectful communication, and punctuality are required at all times.",
                  "",
                  "SECTION 3: BENEFITS PACKAGE",
                  "We offer comprehensive health insurance, retirement planning, and paid time off.`;",
                  "",
                  "const base64Content = btoa(sampleText);",
                  "pm.collectionVariables.set('sample_base64_content', base64Content);",
                  "",
                  "// Note: For actual PDF processing, you need to:",
                  "// 1. Use file upload endpoint instead, or",
                  "// 2. Convert a real PDF to base64 and use .txt extension"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Processing successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test(\"Chunks created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('chunks_created');",
                  "    pm.expect(jsonData.chunks_created).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Processing details present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('processing_time_ms');",
                  "    pm.expect(jsonData).to.have.property('enhancement');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_employee_handbook.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"intelligent\"\n}",
              "options": {
                "raw": {
                  "description": "For PDF processing: Use file upload endpoint or ensure file_content is actual PDF base64 data"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process with Fixed-Size Chunking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Fixed-size chunking used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enhancement).to.include('fixed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_document_fixed.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"fixed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process PDF File (Text Content as PDF)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This demonstrates processing text content with PDF filename",
                  "// WARNING: This will cause 'Failed to extract document content' error",
                  "// because we're sending text as PDF. Use this to test error handling.",
                  "const sampleText = `Employee Information Document",
                  "",
                  "This is sample content that will be sent as PDF but is actually text.`;",
                  "const base64Content = btoa(sampleText);",
                  "pm.collectionVariables.set('fake_pdf_content', base64Content);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This request should demonstrate the error handling",
                  "pm.test(\"Handles invalid PDF gracefully\", function () {",
                  "    // May return 200 with error status or 400, both are acceptable",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'error') {",
                  "        pm.expect(response.message).to.include('extract');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{fake_pdf_content}}\",\n    \"filename\": \"employee.pdf\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"heading\"\n}",
              "options": {
                "raw": {
                  "description": "This demonstrates the error you encountered - text content with PDF filename"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process with Heading-Based Chunking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Heading-based chunking used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enhancement).to.include('heading');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{sample_base64_content}}\",\n    \"filename\": \"sample_document_heading.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"heading\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chunk Comparison Tests",
      "item": [
        {
          "name": "Compare All Chunking Methods",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Create a comprehensive sample document with clear sections",
                  "const comprehensiveDoc = `EMPLOYEE HANDBOOK",
                  "",
                  "SECTION 1: COMPANY OVERVIEW",
                  "Our company was founded in 1995 with the mission to provide excellent service.",
                  "We value integrity, innovation, and teamwork above all else.",
                  "",
                  "Mission Statement",
                  "To deliver exceptional value through innovative solutions while fostering collaboration.",
                  "",
                  "SECTION 2: EMPLOYMENT POLICIES",
                  "All employees must adhere to our code of conduct.",
                  "Professional behavior is expected at all times.",
                  "",
                  "Code of Conduct",
                  "Respectful communication, punctuality, and adherence to company values are required.",
                  "",
                  "SECTION 3: BENEFITS PACKAGE",
                  "We offer comprehensive health insurance and retirement planning assistance.",
                  "All benefits are available after a 90-day probationary period.",
                  "",
                  "Health Benefits",
                  "Full medical, dental, and vision coverage with multiple plan options.`;",
                  "",
                  "const base64Doc = btoa(comprehensiveDoc);",
                  "pm.collectionVariables.set('comprehensive_doc_base64', base64Doc);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"All methods processed successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test(\"Multiple chunks created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.chunks_created).to.be.greaterThan(1);",
                  "});",
                  "",
                  "pm.test(\"Chunk details provided\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('chunk_details');",
                  "    pm.expect(jsonData.chunk_details).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_content\": \"{{comprehensive_doc_base64}}\",\n    \"filename\": \"comprehensive_employee_handbook.txt\",\n    \"force_reindex\": true,\n    \"chunking_method\": \"intelligent\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Azure Search Content Access",
      "description": "Direct access to content stored in Azure Search index without database joins",
      "item": [
        {
          "name": "Get All Documents from Search Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has documents\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "    pm.expect(jsonData.documents).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has metadata\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    pm.expect(jsonData).to.have.property('source', 'azure_search_index');",
                  "});",
                  "",
                  "// Log document details",
                  "try {",
                  "    const jsonData = pm.response.json();",
                  "    console.log(`Total documents: ${jsonData.total_documents}`);",
                  "    if (jsonData.documents.length > 0) {",
                  "        console.log(`First document ID: ${jsonData.documents[0].id}`);",
                  "        console.log(`Content length: ${jsonData.documents[0].content_length}`);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Could not parse search response');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/search/documents?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "documents"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Documents with Limit",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response respects limit\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.documents.length).to.be.at.most(5);",
                  "});",
                  "",
                  "pm.test(\"Documents have content\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        pm.expect(jsonData.documents[0]).to.have.property('content');",
                  "        pm.expect(jsonData.documents[0]).to.have.property('content_length');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/search/documents?limit=5&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "documents"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Documents by Filename",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All documents match filename\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedFilename = pm.request.url.query.get('filename');",
                  "    if (jsonData.documents.length > 0) {",
                  "        jsonData.documents.forEach(doc => {",
                  "            pm.expect(doc.filename).to.include(requestedFilename);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Documents have full content\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        jsonData.documents.forEach(doc => {",
                  "            pm.expect(doc).to.have.property('content');",
                  "            pm.expect(doc.content).to.not.be.empty;",
                  "            pm.expect(doc).to.have.property('title');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/search/documents?filename=sample.txt&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "documents"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "sample.txt",
                  "description": "Filter documents by filename (change this to test with your files)"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Specific Document by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns single document\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.documents).to.have.length(1);",
                  "});",
                  "",
                  "pm.test(\"Document has expected ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.request.url.query.get('document_id');",
                  "    if (jsonData.documents.length > 0) {",
                  "        pm.expect(jsonData.documents[0].id).to.equal(requestedId);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Document has complete content\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        const doc = jsonData.documents[0];",
                  "        pm.expect(doc).to.have.property('content');",
                  "        pm.expect(doc).to.have.property('title');",
                  "        pm.expect(doc).to.have.property('content_length');",
                  "        pm.expect(doc).to.have.property('keyphrases');",
                  "        pm.expect(doc.content).to.not.be.empty;",
                  "    }",
                  "});",
                  "",
                  "// Log document details",
                  "try {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        const doc = jsonData.documents[0];",
                  "        console.log(`Document ID: ${doc.id}`);",
                  "        console.log(`Title: ${doc.title}`);",
                  "        console.log(`Content Length: ${doc.content_length}`);",
                  "        console.log(`Content Preview: ${doc.content.substring(0, 100)}...`);",
                  "        console.log(`Keyphrases: ${JSON.stringify(doc.keyphrases)}`);",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Could not parse document response');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/search/documents?document_id=azure_search_content_test_4&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "documents"
              ],
              "query": [
                {
                  "key": "document_id",
                  "value": "azure_search_content_test_4",
                  "description": "Specific document ID to retrieve (update with actual document ID)"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Documents with Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    pm.expect(jsonData.documents.length).to.be.at.most(10);",
                  "});",
                  "",
                  "pm.test(\"Documents are properly formatted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        jsonData.documents.forEach(doc => {",
                  "            pm.expect(doc).to.have.property('id');",
                  "            pm.expect(doc).to.have.property('content');",
                  "            pm.expect(doc).to.have.property('title');",
                  "            pm.expect(doc).to.have.property('filename');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/search/documents?limit=10&filename=&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "documents"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Maximum number of documents to return"
                },
                {
                  "key": "filename",
                  "value": "",
                  "description": "Optional filename filter (leave empty for all files)",
                  "disabled": true
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin & Utilities",
      "item": [
        {
          "name": "Reset Database (CAUTION)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// SAFETY WARNING - This will delete ALL data",
                  "const warningMessage = 'WARNING: This will delete ALL data from database tables!';",
                  "console.warn(warningMessage);",
                  "",
                  "// Set confirmation automatically for testing",
                  "// Remove this line for production safety",
                  "pm.collectionVariables.set('reset_confirmation', 'yes');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Reset operation completed\", function () {",
                  "    // Accept both success and partial success",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Response contains reset results\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('tables_reset');",
                  "    pm.expect(jsonData).to.have.property('summary');",
                  "});",
                  "",
                  "pm.test(\"Tables were processed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.summary.tables_processed).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Log reset summary",
                  "try {",
                  "    const jsonData = pm.response.json();",
                  "    console.log(`Reset Summary:`, jsonData.summary);",
                  "    console.log(`Total records deleted: ${jsonData.total_records_deleted}`);",
                  "} catch (e) {",
                  "    console.log('Could not parse reset response');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"{{reset_confirmation}}\",\n    \"force\": false\n}",
              "options": {
                "raw": {
                  "description": "DANGER: This deletes ALL database records. Use confirm: 'yes' to proceed."
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Database with URL Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Reset operation completed\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Environment safety check working\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Should either succeed or properly block production resets",
                  "    if (jsonData.status === 'error' && jsonData.message.includes('production')) {",
                  "        pm.expect(jsonData.environment).to.eql('production');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/database/reset?confirm=yes&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "confirm",
                  "value": "yes",
                  "description": "Required confirmation to proceed with reset"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Database (Safety Check)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Safety check prevents unauthorized reset\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Requires confirmation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('confirmation');",
                  "    pm.expect(jsonData).to.have.property('instructions');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"no\"\n}",
              "options": {
                "raw": {
                  "description": "This should fail safely without confirmation"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Upload without File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{base_url}}/api/upload?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "upload"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Process without File Content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error indicates missing file content\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('file_content');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filename\": \"test.txt\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/process_document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "process_document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Non-existent File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message for file not found\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{user_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/files/99999?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "files",
                "99999"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Functions",
      "item": [
        {
          "name": "Database Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Reset operation completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"yes\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Azure Search Index Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Search reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});",
                  "",
                  "pm.test(\"Documents deleted count present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('deleted_documents');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"yes\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Database Reset (Force)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Force reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?force=true&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Azure Search Index Reset (Force)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Force search reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/reset?force=true&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "reset"
              ],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Functions",
      "item": [
        {
          "name": "Database Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Reset operation completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"yes\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Azure Search Index Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Search reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});",
                  "",
                  "pm.test(\"Documents deleted count present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('deleted_documents');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"confirm\": \"yes\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/reset?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "reset"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Database Reset (Force)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Force reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/database/reset?force=true&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "database",
                "reset"
              ],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Azure Search Index Reset (Force)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 207\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 207]);",
                  "});",
                  "",
                  "pm.test(\"Force search reset completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['success', 'partial_success']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/reset?force=true&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "reset"
              ],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document Deletion",
      "item": [
        {
          "name": "Delete Document by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response has message field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful deletion has chunk count\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('deleted_chunks');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/delete/document?document_id={{document_id}}&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "delete",
                "document"
              ],
              "query": [
                {
                  "key": "document_id",
                  "value": "{{document_id}}",
                  "description": "The specific document ID to delete"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Document by Filename",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response has message field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful deletion has chunk count\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('deleted_chunks');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/delete/document?filename={{filename}}&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "delete",
                "document"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "description": "The filename to delete (all chunks)"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Batch Delete Documents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test(\"Response has batch operation fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('deleted_chunks');",
                  "    pm.expect(jsonData).to.have.property('requested_count');",
                  "    pm.expect(jsonData).to.have.property('found_count');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"document_ids\": [\n        \"{{document_id_1}}\",\n        \"{{document_id_2}}\",\n        \"{{document_id_3}}\"\n    ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/delete/document?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "delete",
                "document"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Persisted Chunk by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response has message field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful deletion has count\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('deleted_count');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/delete/document/persisted?document_id={{document_id}}&confirm=yes&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "delete",
                "document",
                "persisted"
              ],
              "query": [
                {
                  "key": "document_id",
                  "value": "{{document_id}}",
                  "description": "The specific document ID to delete from database"
                },
                {
                  "key": "confirm",
                  "value": "yes",
                  "description": "Required confirmation for deletion"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Persisted Chunks by Filename",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response has message field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful deletion has count\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('deleted_count');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/delete/document/persisted?filename={{filename}}&confirm=yes&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "delete",
                "document",
                "persisted"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "description": "The filename to delete from database (all chunks)"
                },
                {
                  "key": "confirm",
                  "value": "yes",
                  "description": "Required confirmation for deletion"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Index Management",
      "item": [
        {
          "name": "Setup Azure Search Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Index setup completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['created', 'exists']);",
                  "});",
                  "",
                  "pm.test(\"Response has index details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('index_name');",
                  "    pm.expect(jsonData).to.have.property('ready');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force_recreate\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/setup?code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "setup"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Force Recreate Azure Search Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Index recreation completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('created');",
                  "});",
                  "",
                  "pm.test(\"Force recreate was used\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.force_recreate).to.equal(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"force_recreate\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/setup?force_recreate=true&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "setup"
              ],
              "query": [
                {
                  "key": "force_recreate",
                  "value": "true",
                  "description": "Force recreation of the index"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        },
        {
          "name": "Setup Custom Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Custom index created\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['created', 'exists']);",
                  "    pm.expect(jsonData.index_name).to.equal('custom-test-index');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"index_name\": \"custom-test-index\",\n    \"force_recreate\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/search/setup?index_name=custom-test-index&code={{function_key}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "search",
                "setup"
              ],
              "query": [
                {
                  "key": "index_name",
                  "value": "custom-test-index",
                  "description": "Custom index name"
                },
                {
                  "key": "code",
                  "value": "{{function_key}}",
                  "description": "Azure Function access key"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values if not already set",
          "if (!pm.collectionVariables.get('user_id')) {",
          "    pm.collectionVariables.set('user_id', 'postman-test-user');",
          "}",
          "",
          "// Log the current request for debugging",
          "console.log(`Making request to: ${pm.request.url}`);",
          "console.log(`Method: ${pm.request.method}`);",
          "console.log(`User ID: ${pm.collectionVariables.get('user_id')}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test(\"Response time is less than 30 seconds\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "// Log response details for debugging",
          "console.log(`Response Status: ${pm.response.status}`);",
          "console.log(`Response Time: ${pm.response.responseTime}ms`);",
          "if (pm.response.json) {",
          "    try {",
          "        const jsonData = pm.response.json();",
          "        console.log(`Response Body Keys: ${Object.keys(jsonData)}`);",
          "    } catch (e) {",
          "        console.log('Response is not valid JSON');",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:7071",
      "type": "string",
      "description": "Base URL for the Azure Functions app (local development)"
    },
    {
      "key": "user_id",
      "value": "postman-test-user",
      "type": "string",
      "description": "User ID for testing purposes"
    },
    {
      "key": "last_file_id",
      "value": "",
      "type": "string",
      "description": "Stores the last uploaded file ID for subsequent requests"
    },
    {
      "key": "sample_base64_content",
      "value": "",
      "type": "string",
      "description": "Base64 encoded sample content for testing"
    },
    {
      "key": "comprehensive_doc_base64",
      "value": "",
      "type": "string",
      "description": "Base64 encoded comprehensive document for chunk comparison testing"
    },
    {
      "key": "reset_confirmation",
      "value": "no",
      "type": "string",
      "description": "Set to 'yes' to enable database reset operations (DANGER: Deletes all data)"
    }
  ]
}